#SALIENCY PREDICTION USING CONVOLUTIONAL NEURAL NETWORK
#BENCHMARK SOURCE CODE USED IMAGE CLASSIFICATION KAGGLE CATS VERSES DOGS DATASET
#ICML 2020
#SALICON DATASET USED
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras import backend as K
from pathlib import Path
from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img
import os

# SALICON IMAGESIZE
img_width, img_height = 400, 500

#TRAINING & VALIDATION DATA 
nb_train_samples = 1000
nb_validation_samples = 400
epochs = 50
batch_size = 16

if K.image_data_format() == 'channels_first':
    input_shape = (3, img_width, img_height)
else:
    input_shape = (img_width, img_height, 3)

model = Sequential()
#FIRST NN LAYER
model.add(Conv2D(32, (3, 3), input_shape=input_shape))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
#SECOND NN LAYER
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
#THIRD NN LAYER
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
#FLATTENING LAYER
model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))

#MODEL COMPILED USING ADAM OPTIMIZER USING BINARY CROSS ENTROPY LOSS AND ACCURACY METRIC AS THR PRIMARY METRIC OF EVALUATION
model.compile
    (
    loss='binary_crossentropy', 
    optimizer='rmsprop',
    metrics=['accuracy']
    )

#DATA PREPROCESSING
train_datagen = ImageDataGenerator
    (
    rescale=1. / 255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
    )
    
test_datagen = ImageDataGenerator(rescale=1. / 255)

#FEEDING TRAINING DATA INTO CNN WITH BATCH SIZE OF 16 AND EPOCHS 50
train_generator = train_datagen.flow_from_directory
    (
    'train',
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary'
    )

print(train_generator.class_indices)

#FEEDING VALIDATION DATA INTO CNN WITH BATCH SIZE OF 16 AND EPOCHS 50
validation_generator = test_datagen.flow_from_directory
    (
   'valid',
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary'
    )

#TRAINING THE MODEL WITH TRAINING AND VALIDATION DATA
model.fit_generator
    (
    train_generator,
    steps_per_epoch=nb_train_samples // batch_size,
    epochs=epochs,
    validation_data=validation_generator,
    validation_steps=nb_validation_samples // batch_size
    )

model.save('khusbu.h5')
